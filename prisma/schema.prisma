// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  email     String     @unique
  password  String
  role      UserRole   @default(USER)
  status    UserStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("Users")
}

enum UserRole {
  ADMIN
  TEACHER
  SUPER_ADMIN
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

// !Done
model Service {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  specialization String
  duration       Int
  price          Float
  isAvailable    Boolean       @default(true)
  doctorId       String        @db.ObjectId
  thumbImage     String
  galleryImages   Json
  description    String
  serviceList    String[]
  doctor         Doctor        @relation(fields: [doctorId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  slots          Slot[]
  appointments   Appointment[]

  @@map("services")
}

// !Done
model Slot {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  startDateTime DateTime
  endDateTime   DateTime
  duration      Int
  isBooked      Boolean      @default(false)
  isAvailable   Boolean      @default(true)
  serviceId     String       @db.ObjectId
  service       Service      @relation(fields: [serviceId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  appointment   Appointment?

  @@map("slots")
}

model Appointment {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  serviceId       String        @db.ObjectId
  service         Service       @relation(fields: [serviceId], references: [id])
  firstName       String
  lastName        String
  email           String
  phone           String
  address         String
  notes           String?
  slotId          String        @unique @db.ObjectId
  slot            Slot          @relation(fields: [slotId], references: [id])
  paymentStatus   PaymentStatus @default(PENDING)
  paymentType     PaymentType   @default(CASH)
  amountPaid      Float         @default(0.0)
  remainingAmount Float         @default(0.0)
  payableAmount   Float         @default(0.0)
  isVisited       Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  payments        Payment[]

  @@map("appointments")
}

model Payment {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  paymentIntentId String
  amount          Float
  status          PaymentStatus @default(PENDING)
  appointmentId   String        @db.ObjectId
  appointment     Appointment   @relation(fields: [appointmentId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("payments")
}

enum PaymentStatus {
  PENDING
  PARTIAL
  COMPLETED
  FAILED
}

enum PaymentType {
  CASH
  PARTIAL
  FULL
  NONE
}

// !Done
model ContactForm {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String?
  phone     String?
  address   String
  country   String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// !Done
model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  image     String?
  rating    Int      @default(0)
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

// !Done
model Doctor {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  title          String
  specialization String
  profileImage   String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  Service        Service[]

  @@map("doctors")
}
